{"ast":null,"code":"var _jsxFileName = \"/Users/mohameddahir/Documents/GitHub/Portfolio/src/components/home/Project.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport { Jumbotron } from \"./migration\";\nimport Row from \"react-bootstrap/Row\";\nimport ProjectCard from \"./ProjectCard\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dummyProject = {\n  name: null,\n  description: null,\n  svn_url: null,\n  stargazers_count: null,\n  languages_url: null,\n  pushed_at: null\n};\nconst API = \"https://api.github.com\";\n// const gitHubQuery = \"/repos?sort=updated&direction=desc\";\n// const specficQuerry = \"https://api.github.com/repos/hashirshoaeb/\";\n\nconst Project = ({\n  heading,\n  username,\n  length,\n  specfic\n}) => {\n  _s();\n  const allReposAPI = `${API}/users/${username}/repos?sort=updated&direction=desc`;\n  const specficReposAPI = `${API}/repos/${username}`;\n  const dummyProjectsArr = new Array(length + specfic.length).fill(dummyProject);\n  const [projectsArray, setProjectsArray] = useState([]);\n  const fetchRepos = useCallback(async () => {\n    let repoList = [];\n    try {\n      // getting all repos\n      const response = await axios.get(allReposAPI);\n      // slicing to the length\n      repoList = [...response.data.slice(0, length)];\n      // adding specified repos\n      try {\n        for (let repoName of specfic) {\n          const response = await axios.get(`${specficReposAPI}/${repoName}`);\n          repoList.push(response.data);\n        }\n      } catch (error) {\n        console.error(error.message);\n      }\n      // setting projectArray\n      // TODO: remove the duplication.\n      setProjectsArray(repoList);\n    } catch (error) {\n      console.error(error.message);\n    }\n  }, [allReposAPI, length, specfic, specficReposAPI]);\n  useEffect(() => {\n    fetchRepos();\n  }, [fetchRepos]);\n  return /*#__PURE__*/_jsxDEV(Jumbotron, {\n    fluid: true,\n    id: \"projects\",\n    className: \"bg-light m-0\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"display-4 pb-5 text-center\",\n        children: heading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: projectsArray.length ? projectsArray.map((project, index) => /*#__PURE__*/_jsxDEV(ProjectCard, {\n          id: `project-card-${index}`,\n          value: project\n        }, `project-card-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this)) : dummyProjectsArr.map((project, index) => /*#__PURE__*/_jsxDEV(ProjectCard, {\n          id: `dummy-${index}`,\n          value: project\n        }, `dummy-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(Project, \"G5dpdOZzE5rK+Ni7q0RvIF0vkjM=\");\n_c = Project;\nexport default Project;\nvar _c;\n$RefreshReg$(_c, \"Project\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Container","Jumbotron","Row","ProjectCard","axios","jsxDEV","_jsxDEV","dummyProject","name","description","svn_url","stargazers_count","languages_url","pushed_at","API","Project","heading","username","length","specfic","_s","allReposAPI","specficReposAPI","dummyProjectsArr","Array","fill","projectsArray","setProjectsArray","fetchRepos","repoList","response","get","data","slice","repoName","push","error","console","message","fluid","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","project","index","value","_c","$RefreshReg$"],"sources":["/Users/mohameddahir/Documents/GitHub/Portfolio/src/components/home/Project.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport { Jumbotron } from \"./migration\";\nimport Row from \"react-bootstrap/Row\";\nimport ProjectCard from \"./ProjectCard\";\nimport axios from \"axios\";\n\nconst dummyProject = {\n  name: null,\n  description: null,\n  svn_url: null,\n  stargazers_count: null,\n  languages_url: null,\n  pushed_at: null,\n};\nconst API = \"https://api.github.com\";\n// const gitHubQuery = \"/repos?sort=updated&direction=desc\";\n// const specficQuerry = \"https://api.github.com/repos/hashirshoaeb/\";\n\nconst Project = ({ heading, username, length, specfic }) => {\n  const allReposAPI = `${API}/users/${username}/repos?sort=updated&direction=desc`;\n  const specficReposAPI = `${API}/repos/${username}`;\n  const dummyProjectsArr = new Array(length + specfic.length).fill(\n    dummyProject\n  );\n\n  const [projectsArray, setProjectsArray] = useState([]);\n\n  const fetchRepos = useCallback(async () => {\n    let repoList = [];\n    try {\n      // getting all repos\n      const response = await axios.get(allReposAPI);\n      // slicing to the length\n      repoList = [...response.data.slice(0, length)];\n      // adding specified repos\n      try {\n        for (let repoName of specfic) {\n          const response = await axios.get(`${specficReposAPI}/${repoName}`);\n          repoList.push(response.data);\n        }\n      } catch (error) {\n        console.error(error.message);\n      }\n      // setting projectArray\n      // TODO: remove the duplication.\n      setProjectsArray(repoList);\n    } catch (error) {\n      console.error(error.message);\n    }\n  }, [allReposAPI, length, specfic, specficReposAPI]);\n\n  useEffect(() => {\n    fetchRepos();\n  }, [fetchRepos]);\n\n  return (\n    <Jumbotron fluid id=\"projects\" className=\"bg-light m-0\">\n      <Container className=\"\">\n        <h2 className=\"display-4 pb-5 text-center\">{heading}</h2>\n        <Row>\n          {projectsArray.length\n            ? projectsArray.map((project, index) => (\n              <ProjectCard\n                key={`project-card-${index}`}\n                id={`project-card-${index}`}\n                value={project}\n              />\n            ))\n            : dummyProjectsArr.map((project, index) => (\n              <ProjectCard\n                key={`dummy-${index}`}\n                id={`dummy-${index}`}\n                value={project}\n              />\n            ))}\n        </Row>\n      </Container>\n    </Jumbotron>\n  );\n};\n\nexport default Project;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}